#include <iostream> 
#include <list> 

using namespace std;

//Creating graph
class Graph
{
	int V; // V will represent the number of vertices (or nodes) within our graph

	list<int> *adj;
public:
	Graph(int V);  

	
	void addEdge(int v, int w);

	//s will represent the starting point in the graph and traverse from there
	void BFS(int s);
};

Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w); // w represents the edge that will be added to Graph g
}

void Graph::BFS(int s)
{
	//Each new vertex will be tagged as a non-visited point 
	bool *visited = new bool[V];
	for (int i = 0; i < V; i++)
		visited[i] = false;

	// Create queue
	list<int> queue;

	// Enque the current node while marking it as visited marking it 
	visited[s] = true;
	queue.push_back(s);

	//i will be used as an iterator to traverse the graph as vertices are being enqueued
	list<int>::iterator i;

	while (!queue.empty())
	{
		//Print visited nodes
		s = queue.front();
		cout << s << " ";
		queue.pop_front();

		for (i = adj[s].begin(); i != adj[s].end(); ++i)
		{
			if (!visited[*i])
			{
				visited[*i] = true;
				queue.push_back(*i);
			}
		}
	}
}


int main()
{
	//In the given assignment, our graph contains 6 nodes in total starting from the very beginning with the accompanying edges:
	Graph g(6);
	g.addEdge(0, 1);
	g.addEdge(0, 2);
	g.addEdge(1, 2);
	g.addEdge(1, 3);
	g.addEdge(1, 2);
	g.addEdge(2, 3);
	g.addEdge(2, 4);
	g.addEdge(3, 4);
	g.addEdge(3, 5);
	g.addEdge(4, 5);


	//Printing each visited node starting from node 0("A")
	g.BFS(0);


}
