//Unlike the last code, this will utilize an array of nodes and a list pointer that will identify the stored values.

#include <iostream> 
#include <list> 
using namespace std;

class Graph
{
	int V;  // V will represent the number of vertices (or nodes) within our graph

	//*adj will serve as a pointer within the array of nodes.
	list <int> *adj;

	// A recursive function used by DFS 
	void DFSUtil(int v, bool visited[]);
	

	public:
	Graph(int V); 
	// function to add an edge to graph 
	void addEdge(int v, int w);
	// v will represent the starting point in the graph and traverse from there
	void DFS(int v);
};

Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w); // w represents the edge that will be added to Graph g
}

void Graph::DFSUtil(int v, bool visited[])
{
	// Mark the current node as visited and print
	visited[v] = true;
	cout << v << " ";


	//iterator i will shift it's position through the populated array and the function will reoccur
	list<int>::iterator i;
	for (i = adj[v].begin(); i != adj[v].end(); ++i)
		if (!visited[*i])
			DFSUtil(*i, visited);
}


void Graph::DFS(int v)
{
	//Each new vertex will be tagged as a non-visited point
	bool *visited = new bool[V];
	for (int i = 0; i < V; i++)
		visited[i] = false;

	//Call function DFSUtil to print each visited node
	DFSUtil(v, visited);
}

//Main Function
int main()
{
	//In the given assignment, our graph contains 6 nodes in total starting from the very beginning with the accompanying edges:
	Graph g(6);
	g.addEdge(0, 1);
	g.addEdge(0, 2);
	g.addEdge(1, 2);
	g.addEdge(1, 3);
	g.addEdge(1, 2);
	g.addEdge(2, 3);
	g.addEdge(2, 4);
	g.addEdge(3, 4);
	g.addEdge(3, 5);
	g.addEdge(4, 5);

	g.DFS(0);
}
